@if (IncludeSearchButton)
{
<<<<<<< HEAD
    <button class="btn btn-light btn-sm rounded-circle align-baseline" @onclick="ApplyFilters">
=======
    <button class="btn btn-light btn-sm rounded-circle align-baseline">
>>>>>>> 8067c1cc92c53e34d87ef71bf5c8fe928812459e
        <i class="fas fa-search"></i>
    </button>
}

@if (IncludeToggleFilters)
{
    @if (ShowHeaderFilters)
    {
        <button class="btn btn-light btn-sm rounded-circle align-baseline">
            <i class="fas fa-minus" @onclick="(e) => ShowHeaderFiltersChangedEvent.InvokeAsync(false)"></i>
        </button>
    }
    else
    {
        <button class="btn btn-light btn-sm rounded-circle align-baseline">
            <i class="fas fa-plus" @onclick="(e) => ShowHeaderFiltersChangedEvent.InvokeAsync(true)"></i>
        </button>
    }
}

@code {
<<<<<<< HEAD
    /// <summary>
    /// Indicates whether or not to include a search icon. When clicked filters, sorting and paging is performed on the server 
    /// is FetchData has a value otherwise it happens on the client
    /// </summary>
    /// <value>By default is False</value>
    [Parameter]
    public bool IncludeSearchButton { get; set; } = false;

    /// <summary>
    /// Indicates whether or not to include a toggle icon. When clicked header/grid filters will disappear
    /// </summary>
    /// <value>By default is False</value>
    [Parameter]
    public bool IncludeToggleFilters { get; set; } = false;
    
    /// <summary>
    /// Indicates whether or not to show the header/grid filters
    /// </summary>
    /// <value>By default is True</value>
    [Parameter]
    public bool ShowHeaderFilters { get; set; } = true;
        
    /// <summary>
    /// Function to call for appling filters
    /// </summary>
    [Parameter]
    public Func<Task> ApplyFilters { get; set; }

    /// <summary>
    /// Event callback when an header filter changed
    /// </summary>
=======
    [Parameter]
    public bool IncludeSearchButton { get; set; } = false;

    [Parameter]
    public bool IncludeToggleFilters { get; set; } = false;

    [Parameter]
    public bool ShowHeaderFilters { get; set; } = true;

    [Parameter]
    public Func<Task> ApplyFilters { get; set; }

>>>>>>> 8067c1cc92c53e34d87ef71bf5c8fe928812459e
    [Parameter]
    public EventCallback<bool> ShowHeaderFiltersChangedEvent { get; set; }
}
