@using System.Linq.Expressions;
@using System.Collections;

@typeparam TModel

@code {
    [CascadingParameter]
    private DataTable<TModel>? DataTable { get; set; }

    /// <summary>
    /// The CSS Class for the table
    /// </summary>
    /// <value>By default is table</value>
    [Parameter]
    public string CssClass { get; set; } = "";

    /// <summary>
    /// The text alignment for the column <seealso cref="PSC.Blazor.Components.DataTable.Enums.TextAlignment" />
    /// </summary>
    /// <value>By default is Left.</value>
    [Parameter]
    public TextAlignment TextAlignment { get; set; } = TextAlignment.Left;

    /// <summary>
    /// The text alignment for the column <seealso cref="PSC.Blazor.Components.DataTable.Enums.VerticalAlignment" />
    /// </summary>
    /// <value>By default is Top.</value>
    [Parameter]
    public VerticalAlignment VerticalAlignment { get; set; } = VerticalAlignment.Top;

    /// <summary>
    /// Indicates whether or not sorting is enabled for this column
    /// </summary>
    /// <value>By default is False</value>
    [Parameter]
    public bool IsSortable { get; set; } = false;

    /// <summary>
    /// Indicates whether or not filtering is enabled for this column
    /// </summary>
    /// <value>By default is False</value>
    [Parameter]
    public bool IsFilterable { get; set; } = false;

    /// <summary>
    /// Indicates whether the column is resizable
    /// </summary>
    /// <value>By default is False</value>
    [Parameter]
    public bool IsResizable { get; set; } = false;

    /// <summary>
    /// The name of the column header (by default the name of the property is used)
    /// </summary>
    [Parameter]
    public string? CustomTitle { get; set; }

    /// <summary>
    /// Indicates whether or not this column is sorted on by default
    /// </summary>
    /// <value>By default is False</value>
    [Parameter]
    public bool IsDefaultSortColumn { get; set; } = false;

    /// <summary>
    /// The sort direction of the default sorting column <seealso cref="PSC.Blazor.Components.DataTable.Enums.SortDirection" />
    /// </summary>
    /// <value>By default is Top.</value>
    [Parameter]
    public SortDirection DefaultSortDirection { get; set; } = SortDirection.Ascending;

    /// <summary>
    /// The selector of a field/property of TModel to use for the column
    /// </summary>
    [Parameter]
    public Expression<Func<TModel, object>>? Property { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Template with the param being the name of the column
    /// </summary>
    [Parameter]
    public RenderFragment<string> HeaderTemplate { get; set; }

    /// <summary>
    /// The custom render fragment to use for the column
    /// </summary>
    [Parameter]
    public RenderFragment<TModel>? RowTemplate { get; set; }

    /// <summary>
    /// Any custom attributes for the header inputs
    /// </summary>
    [Parameter]
    public Dictionary<string, object> HeaderFilterAttributes { get; set; } = new Dictionary<string, object>();

    /// <summary>
    /// Indicates whether or not the column is visible
    /// </summary>
    [Parameter]
    public bool IsVisible
    {
        get => isVisible;
        set
        {
            if (isVisible != value)
            {
                isVisible = value;
                RaiseStateChanged();
            }
        }
    }
    private bool isVisible = true;

    /// <summary>
    /// The DateTimeFormat to use in header/grid filters <seealso cref="PSC.Blazor.Components.DataTable.Code.Enumerations.DateTimeFormat" />
    /// </summary>
    [Parameter]
    public DateTimeFormat DateTimeFormat { get; set; } = DateTimeFormat.Date;

    /// <summary>
    /// When true the MaxWidth property will be ignored and the table will size according to it's content
    /// </summary>
    [Parameter]
    public bool SizeToContent { get; set; }

    /// <summary>
    /// The min width of the header (Default unit is vw)
    /// </summary>
    [Parameter]
    public int MinWidthHeader { get; set; } = 10;

    /// <summary>
    /// Css unit of MinWidthHeader property (default vw)
    /// </summary>
    [Parameter]
    public CssUnit MinWidthHeaderUnit { get; set; } = CssUnit.Vw;

    /// <summary>
    /// The max width in pixels of a column
    /// </summary>
    [Parameter]
    public int MaxWidth { get; set; } = 210;

    /// <summary>
    /// Css unit of MaxWidth property (default px)
    /// </summary>
    [Parameter]
    public CssUnit MaxWidthUnit { get; set; } = CssUnit.Px;

    /// <summary>
    /// Header filter type
    /// </summary>
    [Parameter]
    public ObjectFilter HeaderFilterType
    {
        get
        {
            if (objectFilter != null) return objectFilter;
            if (Type.GetTypeCode(PropertyType) == TypeCode.String) return ObjectFilter.Contains;
            else return ObjectFilter.IsEquals;
        }
        set
        {
            objectFilter = value;
        }
    }
    private ObjectFilter? objectFilter;

    public Guid Guid { get; set; }

    public Type PropertyType
    {
        get
        {
            if (Property != null) return Utils.GetPropertyType(Property);
            return typeof(string);
        }
    }

    protected override Task OnInitializedAsync()
    {
        if (DataTable == null) throw new ArgumentNullException($"A 'DataTableColumn' must be a child of a 'DataTable' component");

        Guid = Guid.NewGuid();
        DataTable.AddColumn(this);

        return Task.CompletedTask;
    }

    /// <summary>
    /// Gets column property name
    /// </summary>
    /// <returns></returns>
    public string GetColumnPropertyName()
    {
        if (Property != null) return Utils.GetPropertyName<TModel>(Property);
        return "";
    }

    /// <summary>
    /// Gets column visual property name
    /// </summary>
    public string GetColumnVisualPropertyName()
    {
        if (Property != null)
        {
            string fullColumnName = GetColumnPropertyName();
            string propertyName = Utils.GetPropertyName<TModel>(Property);

            var parts = propertyName.Split('.');
            if (parts.Length > 0) return parts.Last();
        }

        return "";
    }

    /// <summary>
    /// Gets column header style
    /// </summary>
    /// <returns></returns>
    public string GetColumnHeaderStyle() => $"text-align: {TextAlignment}; min-width: {MinWidthHeader}{MinWidthHeaderUnit}; top: 0; position: sticky; z-index: 1; border-top: none;" + GetColumnResizableHeaderStyle();

    /// <summary>
    /// Gets column row data style
    /// </summary>
    /// <returns></returns>
    public string GetColumnRowDataStyle() => $"text-align: {TextAlignment}; max-width: {MaxWidth}{MaxWidthUnit}; white-space: nowrap; text-overflow: ellipsis; overflow: hidden;";

    private string GetColumnResizableHeaderStyle() => IsResizable ? "resize: horizontal; overflow: auto;" : "";

    public event EventHandler? StateChanged;

    private void RaiseStateChanged()
    {
        EventHandler? handler = StateChanged;
        handler?.Invoke(this, new EventArgs());
    }
}
