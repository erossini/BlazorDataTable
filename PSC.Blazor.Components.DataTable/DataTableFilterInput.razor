@using System.Collections;

@typeparam TModel

@if (IsHeaderRule)
{
	@if (FilterRule.ExpectedValueType.IsEnum)
	{
		var enumValues = Enum.GetNames(FilterRule.ExpectedValueType).ToList();
		<EnumInput Value="@FilterRule.FilterValue"
				   EnumValues="@enumValues"
				   OnValueChangedEvent="@FilterRule.UpdateFilterValue"
				   IncludeApply="IncludeApply()"
				   IsApplied="@FilterRule.IsApplied"
				   AppliedText="@FilterRule.FilterValue.ToString()"
				   ApplyFilterEvent="(e) => ApplyFilter(FilterRule.Guid, true)"
				   UnApplyFilterEvent="(e) => UnApplyFilter(FilterRule.Guid, true)"
				   Attributes="Attributes"
				   ApplyButtonCssClass="@ApplyButtonCssClass"
				   InputCssClass="@InputCssClass"
				   MaxWidth="MaxWidth" />
	}
	else
	{
		@switch (Type.GetTypeCode(FilterRule.ExpectedValueType))
		{
			case TypeCode.Int16:
				<NumberInput TNumber="short"
							 Value="@FilterRule.FilterValue"
							 OnValueChangedEvent="@FilterRule.UpdateFilterValue"
							 IncludeApply="IncludeApply()"
							 IsApplied="@FilterRule.IsApplied"
							 AppliedText="@FilterRule.FilterValue!.ToString()"
							 ApplyFilterEvent="(e) => ApplyFilter(FilterRule.Guid, true)"
							 UnApplyFilterEvent="(e) => UnApplyFilter(FilterRule.Guid, true)"
							 Attributes="Attributes"
							 ApplyButtonCssClass="@ApplyButtonCssClass"
							 InputCssClass="@InputCssClass"
							 MaxWidth="MaxWidth" />
				break;
			case TypeCode.Int32:
				<NumberInput TNumber="int"
							 Value="@FilterRule.FilterValue"
							 OnValueChangedEvent="@FilterRule.UpdateFilterValue"
							 IncludeApply="IncludeApply()"
							 IsApplied="@FilterRule.IsApplied"
							 AppliedText="@FilterRule.FilterValue!.ToString()"
							 ApplyFilterEvent="(e) => ApplyFilter(FilterRule.Guid, true)"
							 UnApplyFilterEvent="(e) => UnApplyFilter(FilterRule.Guid, true)"
							 Attributes="Attributes"
							 ApplyButtonCssClass="@ApplyButtonCssClass"
							 InputCssClass="@InputCssClass"
							 MaxWidth="MaxWidth" />
				break;
			case TypeCode.Int64:
				<NumberInput TNumber="long"
							 Value="@FilterRule.FilterValue"
							 OnValueChangedEvent="@FilterRule.UpdateFilterValue"
							 IncludeApply="IncludeApply()"
							 IsApplied="@FilterRule.IsApplied"
							 AppliedText="@FilterRule.FilterValue!.ToString()"
							 ApplyFilterEvent="(e) => ApplyFilter(FilterRule.Guid, true)"
							 UnApplyFilterEvent="(e) => UnApplyFilter(FilterRule.Guid, true)"
							 Attributes="Attributes"
							 ApplyButtonCssClass="@ApplyButtonCssClass"
							 InputCssClass="@InputCssClass"
							 MaxWidth="MaxWidth" />
				break;
			case TypeCode.UInt16:
				<NumberInput TNumber="ushort"
							 Value="@FilterRule.FilterValue"
							 OnValueChangedEvent="@FilterRule.UpdateFilterValue"
							 IncludeApply="IncludeApply()"
							 IsApplied="@FilterRule.IsApplied"
							 AppliedText="@FilterRule.FilterValue!.ToString()"
							 ApplyFilterEvent="(e) => ApplyFilter(FilterRule.Guid, true)"
							 UnApplyFilterEvent="(e) => UnApplyFilter(FilterRule.Guid, true)"
							 ApplyButtonCssClass="@ApplyButtonCssClass"
							 InputCssClass="@InputCssClass"
							 MaxWidth="MaxWidth" />
				break;
			case TypeCode.UInt32:
				<NumberInput TNumber="uint"
							 Value="@FilterRule.FilterValue"
							 OnValueChangedEvent="@FilterRule.UpdateFilterValue"
							 IncludeApply="IncludeApply()"
							 IsApplied="@FilterRule.IsApplied"
							 AppliedText="@FilterRule.FilterValue!.ToString()"
							 ApplyFilterEvent="(e) => ApplyFilter(FilterRule.Guid, true)"
							 UnApplyFilterEvent="(e) => UnApplyFilter(FilterRule.Guid, true)"
							 Attributes="Attributes"
							 ApplyButtonCssClass="@ApplyButtonCssClass"
							 InputCssClass="@InputCssClass"
							 MaxWidth="MaxWidth" />
				break;
			case TypeCode.UInt64:
				<NumberInput TNumber="ulong"
							 Value="@FilterRule.FilterValue"
							 OnValueChangedEvent="@FilterRule.UpdateFilterValue"
							 IncludeApply="IncludeApply()"
							 IsApplied="@FilterRule.IsApplied"
							 AppliedText="@FilterRule.FilterValue!.ToString()"
							 ApplyFilterEvent="(e) => ApplyFilter(FilterRule.Guid, true)"
							 UnApplyFilterEvent="(e) => UnApplyFilter(FilterRule.Guid, true)"
							 Attributes="Attributes"
							 ApplyButtonCssClass="@ApplyButtonCssClass"
							 InputCssClass="@InputCssClass"
							 MaxWidth="MaxWidth" />
				break;
			case TypeCode.Double:
				<FloatingPointInput TFloatingPoint="double"
									Value="@FilterRule.FilterValue"
									OnValueChangedEvent="@FilterRule.UpdateFilterValue"
									IncludeApply="IncludeApply()"
									IsApplied="@FilterRule.IsApplied"
									AppliedText="@FilterRule.FilterValue!.ToString()"
									ApplyFilterEvent="(e) => ApplyFilter(FilterRule.Guid, true)"
									UnApplyFilterEvent="(e) => UnApplyFilter(FilterRule.Guid, true)"
									Attributes="Attributes"
									ApplyButtonCssClass="@ApplyButtonCssClass"
									InputCssClass="@InputCssClass"
									MaxWidth="MaxWidth" />
				break;
			case TypeCode.Decimal:
				<FloatingPointInput TFloatingPoint="decimal"
									Value="@FilterRule.FilterValue"
									OnValueChangedEvent="@FilterRule.UpdateFilterValue"
									IncludeApply="IncludeApply()"
									IsApplied="@FilterRule.IsApplied"
									AppliedText="@FilterRule.FilterValue!.ToString()"
									ApplyFilterEvent="(e) => ApplyFilter(FilterRule.Guid, true)"
									UnApplyFilterEvent="(e) => UnApplyFilter(FilterRule.Guid, true)"
									Attributes="Attributes"
									ApplyButtonCssClass="@ApplyButtonCssClass"
									InputCssClass="@InputCssClass"
									MaxWidth="MaxWidth" />
				break;
			case TypeCode.Boolean:
				<BooleanInput Value="@FilterRule.FilterValue"
							  OnValueChangedEvent="@FilterRule.UpdateFilterValue"
							  IncludeApply="IncludeApply()"
							  IsApplied="@FilterRule.IsApplied"
							  AppliedText="@FilterRule.FilterValue!.ToString()"
							  ApplyFilterEvent="(e) => ApplyFilter(FilterRule.Guid, true)"
							  UnApplyFilterEvent="(e) => UnApplyFilter(FilterRule.Guid, true)"
							  Attributes="Attributes"
							  ApplyButtonCssClass="@ApplyButtonCssClass"
							  InputCssClass="@InputCssClass"
							  MaxWidth="MaxWidth" />
				break;
			case TypeCode.String:
				<StringInput Value="@FilterRule.FilterValue"
							 OnValueChangedEvent="@FilterRule.UpdateFilterValue"
							 IncludeApply="IncludeApply()"
							 IsApplied="@FilterRule.IsApplied"
							 AppliedText="@FilterRule.FilterValue!.ToString()"
							 ApplyFilterEvent="(e) => ApplyFilter(FilterRule.Guid, true)"
							 UnApplyFilterEvent="(e) => UnApplyFilter(FilterRule.Guid, true)"
							 Attributes="Attributes"
							 ApplyButtonCssClass="@ApplyButtonCssClass"
							 InputCssClass="@InputCssClass"
							 MaxWidth="MaxWidth" />
				break;
			case TypeCode.DateTime:
				@if (DateTimeFormat == DateTimeFormat.Date)
				{
					<DateInput Value="@FilterRule.FilterValue"
							   OnValueChangedEvent="@FilterRule.UpdateFilterValue"
							   IncludeApply="IncludeApply()"
							   IsApplied="@FilterRule.IsApplied"
							   AppliedText="@FilterRule.FilterValue!.ToString(DateTimeFormat.Format)"
							   ApplyFilterEvent="(e) => ApplyFilter(FilterRule.Guid, true)"
							   UnApplyFilterEvent="(e) => UnApplyFilter(FilterRule.Guid, true)"
							   Attributes="Attributes"
							   ApplyButtonCssClass="@ApplyButtonCssClass"
							   InputCssClass="@InputCssClass"
							   MaxWidth="MaxWidth" />
				}
				else
				{
					<DateTimeInput Value="@FilterRule.FilterValue"
								   OnValueChangedEvent="@FilterRule.UpdateFilterValue"
								   IncludeApply="IncludeApply()"
								   IsApplied="@FilterRule.IsApplied"
								   AppliedText="@FilterRule.FilterValue!.ToString(DateTimeFormat.Format)"
								   ApplyFilterEvent="(e) => ApplyFilter(FilterRule.Guid, true)"
								   UnApplyFilterEvent="(e) => UnApplyFilter(FilterRule.Guid, true)"
								   Attributes="Attributes"
								   ApplyButtonCssClass="@ApplyButtonCssClass"
								   InputCssClass="@InputCssClass"
								   DateTimeFormat="DateTimeFormat"
								   MaxWidth="MaxWidth" />
				}
				break;

			// TODO: Might be possible
			case TypeCode.Object:
			case TypeCode.Char:
			case TypeCode.Byte:
			case TypeCode.SByte:
			case TypeCode.Single:
				@if (!Attributes.ContainsKey("disabled")) Attributes.Add("disabled", "");
				<StringInput Attributes="Attributes" InputCssClass="@InputCssClass" MaxWidth="MaxWidth" />
				break;
		}
	}
}
else
{
	@if (FilterRule.ExpectedValueType.IsEnum)
	{
		var enumValues = Enum.GetNames(FilterRule.ExpectedValueType).ToList();
		<EnumInput Value="@FilterRule.FilterValue" EnumValues="@enumValues" OnValueChangedEvent="@FilterRule.UpdateFilterValue" MaxWidth="MaxWidth" />
	}
	else
	{
		@switch (Type.GetTypeCode(FilterRule.ExpectedValueType))
		{
			case TypeCode.Int16:
				<NumberInput TNumber="short" Value="@FilterRule.FilterValue" OnValueChangedEvent="@FilterRule.UpdateFilterValue" MaxWidth="MaxWidth" />
				break;
			case TypeCode.Int32:
				<NumberInput TNumber="int" Value="@FilterRule.FilterValue" OnValueChangedEvent="@FilterRule.UpdateFilterValue" MaxWidth="MaxWidth" />
				break;
			case TypeCode.Int64:
				<NumberInput TNumber="long" Value="@FilterRule.FilterValue" OnValueChangedEvent="@FilterRule.UpdateFilterValue" MaxWidth="MaxWidth" />
				break;
			case TypeCode.UInt16:
				<NumberInput TNumber="ushort" Value="@FilterRule.FilterValue" OnValueChangedEvent="@FilterRule.UpdateFilterValue" MaxWidth="MaxWidth" />
				break;
			case TypeCode.UInt32:
				<NumberInput TNumber="uint" Value="@FilterRule.FilterValue" OnValueChangedEvent="@FilterRule.UpdateFilterValue" MaxWidth="MaxWidth" />
				break;
			case TypeCode.UInt64:
				<NumberInput TNumber="ulong" Value="@FilterRule.FilterValue" OnValueChangedEvent="@FilterRule.UpdateFilterValue" MaxWidth="MaxWidth" />
				break;
			case TypeCode.Double:
				<FloatingPointInput TFloatingPoint="double" Value="@FilterRule.FilterValue" OnValueChangedEvent="@FilterRule.UpdateFilterValue" MaxWidth="MaxWidth" />
				break;
			case TypeCode.Decimal:
				<FloatingPointInput TFloatingPoint="decimal" Value="@FilterRule.FilterValue" OnValueChangedEvent="@FilterRule.UpdateFilterValue" MaxWidth="MaxWidth" />
				break;
			case TypeCode.Boolean:
				<BooleanInput Value="@FilterRule.FilterValue" OnValueChangedEvent="@FilterRule.UpdateFilterValue" MaxWidth="MaxWidth" />
				break;
			case TypeCode.String:
				<StringInput Value="@FilterRule.FilterValue" OnValueChangedEvent="@FilterRule.UpdateFilterValue" MaxWidth="MaxWidth" />
				break;
			case TypeCode.DateTime:
				@if (DateTimeFormat == DateTimeFormat.Date)
				{
					<DateInput Value="@FilterRule.FilterValue" OnValueChangedEvent="@FilterRule.UpdateFilterValue" MaxWidth="MaxWidth" />
				}
				else
				{
					<DateTimeInput Value="@FilterRule.FilterValue" OnValueChangedEvent="@FilterRule.UpdateFilterValue" DateTimeFormat="DateTimeFormat" MaxWidth="MaxWidth" />
				}
				break;

			// TODO: Might be possible
			case TypeCode.Object:
				throw new Exception("Unsupported property type for filtering");
			case TypeCode.Char:
			case TypeCode.Byte:
			case TypeCode.SByte:
			case TypeCode.Single:
				throw new Exception("Unsupported property type for filtering");
		}
	}
}

@code {
	[Parameter]
	public FilterRule<TModel> FilterRule { get; set; }

	[Parameter]
	public bool IsHeaderRule { get; set; }

	[Parameter]
	public Dictionary<string, object> Attributes { get; set; } = new Dictionary<string, object>();

	[Parameter]
	public string ApplyButtonCssClass { get; set; }

	[Parameter]
	public string InputCssClass { get; set; } = "";

	[Parameter]
	public DateTimeFormat DateTimeFormat { get; set; } = DateTimeFormat.Date;

	[Parameter]
	public Func<Guid, bool, Task> ApplyFilter { get; set; }

	[Parameter]
	public Func<Guid, bool, Task> UnApplyFilter { get; set; }

	[Parameter]
	public int MaxWidth { get; set; }

	private bool IncludeApply()
	{
		if (Attributes == null || Attributes.Count == 0) return true;

		if (Attributes.ContainsKey("disabled")) return false;
		else return true;
	}
}
